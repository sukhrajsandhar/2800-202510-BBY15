<%- include("templates/header") %>

<!-- Main Content -->
<main style="padding: 5rem; text-align: center;">
  <div style="position: relative; display: inline-block;">
    <!-- Pseudo Map Image -->
    <img src="/pseudoMap.jpg" alt="Map" style="max-width: 100%; height: auto; border: 2px solid #ddd; border-radius: 8px;">

    <!-- Clickable Campsite Marker -->
    <a href="/campsite-info" style="position: absolute; top: 40%; left: 50%; transform: translate(-50%, -50%);">
      <img src="https://cdn-icons-png.flaticon.com/512/252/252025.png" alt="Campsite" style="width: 32px; height: 32px;">
    </a>
  </div>
</main>

<body>
  <!-- Map container -->
  <div id="map"></div>

  <!-- Floating search bar -->
      <div class="search-container">
          <div class="search-bar">
              <i class="fas fa-search"></i>
              <input type="text" id="location-lookup" placeholder="Search for a location..." autocomplete="address-line1">
          </div>
          <div class="location-display">
              <i class="fas fa-location-dot"></i>
              <span id="current-location">Getting location...</span>
          </div>
          <div class="weather-display">
              <span id="weather-info">Loading weather...</span>
          </div>
      </div>

  <!-- Floating navigation -->
  <nav class="nav-container">
      <div class="nav-links">
          <a href="main.html" class="nav-link active">
              <i class="fas fa-compass"></i>
              <span>Map</span>
          </a>
          <a href="favorites.html" class="nav-link">
              <i class="fas fa-star"></i>
              <span>Favorites</span>
          </a>
          <a href="bookings.html" class="nav-link">
              <i class="fas fa-campground"></i>
              <span>Bookings</span>
          </a>
          <a href="profile.html" class="nav-link">
              <i class="fas fa-user"></i>
              <span>Profile</span>
          </a>
      </div>
  </nav>

  <!-- Scripts -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
      crossorigin="anonymous"></script>

      <script type="module">
      import config from './config.js';

      // Initialize map
      mapboxgl.accessToken = config.MAPBOX_ACCESS_TOKEN;
      const map = new mapboxgl.Map({
          container: 'map',
          style: 'mapbox://styles/str4t/cm7s21ut7003s01snduvec3nn',
          center: [-123.1207, 49.1527],
          zoom: 9
      });

      // Add geolocation control
      const geolocateControl = new mapboxgl.GeolocateControl({
          positionOptions: {
              enableHighAccuracy: true
          },
          trackUserLocation: true,
          showUserHeading: true
      });

      map.addControl(geolocateControl);

      // Update location display when position changes
      geolocateControl.on('geolocate', async (e) => {
          const locationDisplay = document.getElementById('current-location');
          const weatherInfo = document.getElementById('weather-info');
          const lat = e.coords.latitude;
          const lng = e.coords.longitude;
          
          try {
              // Reverse geocode the coordinates to get the address
              const response = await fetch(
                  `https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?access_token=${mapboxgl.accessToken}`
              );
              const data = await response.json();
              
              if (data.features && data.features.length > 0) {
                  // Get the most relevant address
                  const address = data.features[0].place_name;
                  locationDisplay.textContent = address;
              } else {
                  locationDisplay.textContent = 'Address not found';
              }
          } catch (error) {
              console.error('Error getting address:', error);
              locationDisplay.textContent = 'Error getting address';
          }

          // Fetch weather from OpenWeatherMap
          try {
              const OPENWEATHER_API_KEY = 'f7cb5e5c969b57971a8aa3ff7dac3f59';
              const weatherRes = await fetch(
                  `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&units=metric&appid=${OPENWEATHER_API_KEY}`
              );
              const weatherData = await weatherRes.json();
              if (weatherData && weatherData.weather && weatherData.weather.length > 0) {
                  const temp = Math.round(weatherData.main.temp);
                  const desc = weatherData.weather[0].description;
                  const icon = weatherData.weather[0].icon;
                  weatherInfo.innerHTML = `<img src='https://openweathermap.org/img/wn/${icon}.png' alt='${desc}' style='vertical-align:middle;width:20px;height:20px;'> ${temp}°C, ${desc}`;
              } else {
                  weatherInfo.textContent = 'Weather not found';
              }
          } catch (error) {
              console.error('Error getting weather:', error);
              weatherInfo.textContent = 'Error getting weather';
          }
      });

      // Add navigation control
      map.addControl(new mapboxgl.NavigationControl({ showCompass: true }), 'top-right');

      // Add geocoder
      const geocoder = new MapboxGeocoder({
          accessToken: mapboxgl.accessToken,
          mapboxgl: mapboxgl,
          placeholder: 'Search for a location...',
          marker: false,
          flyTo: {
              bearing: 0,
              essential: true,
              padding: {top: 0, bottom: 0, left: 0, right: 0},
              zoom: 14
          }
      });

      // Add geocoder to the search input
      const searchInput = document.getElementById('location-lookup');
      searchInput.parentNode.replaceChild(geocoder.onAdd(map), searchInput);

      // Handle geocoder results
      geocoder.on('result', (event) => {
          const result = event.result;
          // Fly to the selected location
          map.flyTo({
              center: result.center,
              zoom: 14,
              essential: true
          });
      });

      // Handle geocoder clear
      geocoder.on('clear', () => {
          // Reset the map view when search is cleared
          map.flyTo({
              center: [-123.1207, 49.1527],
              zoom: 9,
              essential: true
          });
      });

      // Add active state to current page in navigation
      const currentPage = window.location.pathname.split('/').pop();
      document.querySelectorAll('.nav-link').forEach(link => {
          if (link.getAttribute('href') === currentPage) {
              link.classList.add('active');
          }
      });

      // Add BC Parks camping locations
      map.on('load', () => {
          // Sample camping locations in BC with detailed information
          const campingLocations = [
              // ... camping locations array ...
          ];

          // Add markers for each camping location
          campingLocations.forEach(location => {
              // Create a custom marker element with enhanced styling
              const el = document.createElement('div');
              el.className = 'camping-marker';
              el.innerHTML = `
                  <div class="marker-container">
                      <div class="marker-icon">
                          <i class="fas fa-campground"></i>
                      </div>
                      <div class="marker-pulse"></div>
                  </div>
              `;
              el.style.cursor = 'pointer';

              // Create popup content with more details
              const popupContent = `
                  <div class="camping-popup">
                      <h4>${location.name}</h4>
                      <div class="popup-rating">
                          <span class="stars">${'★'.repeat(Math.floor(location.rating))}${'☆'.repeat(5-Math.floor(location.rating))}</span>
                          <span class="rating">${location.rating} (${location.reviews} reviews)</span>
                      </div>
                      <p class="description">${location.description}</p>
                      <div class="popup-details">
                          <p><strong>Type:</strong> ${location.type}</p>
                          <p><strong>Season:</strong> ${location.season}</p>
                          <p><strong>Difficulty:</strong> ${location.difficulty}</p>
                          <p><strong>Fees:</strong> ${location.fees.camping}</p>
                      </div>
                      <div class="popup-amenities">
                          <h5>Amenities:</h5>
                          <ul>
                              ${location.amenities.map(amenity => `<li>${amenity}</li>`).join('')}
                          </ul>
                      </div>
                      <div class="popup-actions">
                          <a href="${location.reservation}" target="_blank" class="reserve-btn">Make Reservation</a>
                      </div>
                  </div>
              `;

              // Create and add the marker
              new mapboxgl.Marker(el)
                  .setLngLat(location.coordinates)
                  .setPopup(new mapboxgl.Popup({ offset: 25 }).setHTML(popupContent))
                  .addTo(map);
          });
      });
      </script>
</body>

<!-- Bottom Sticky Footer Nav Bar -->
<footer style="position: fixed; bottom: 0; left: 0; width: 100%; background-color: #333; color: white; display: flex; justify-content: space-around; padding: 0.5rem 0;">
  <a href="/" style="color: white; text-decoration: none;">Home</a>
  <a href="/search" style="color: white; text-decoration: none;">Search</a>
  <a href="/profile" style="color: white; text-decoration: none;">Profile</a>
</footer>

<%- include("templates/footer") %>
